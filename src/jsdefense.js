// Generated by CoffeeScript 1.4.0
(function() {
  var BasicMap, Creep, CreepFactory, FreezeTower, Game, GunTower, Map, Plane, Renderable, RocketTower, Soldier, Tank, TeleportTower, Tile, Tower, TowerFactory,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Renderable = (function() {

    function Renderable() {}

    Renderable.prototype.load = function(game) {
      game.register(this.getId(), this);
      return this.game = game;
    };

    Renderable.prototype.unload = function() {
      if (this.game) {
        return this.game.unregister(this.getId());
      }
    };

    Renderable.prototype.render = function() {
      return console.log("render base!");
    };

    Renderable.prototype.raise = function(msg) {
      throw new Error(msg);
    };

    Renderable.prototype.getId = function() {
      return this.raise("getId is abstract on Renderable");
    };

    Renderable.prototype.draw = false;

    Renderable.prototype.update = false;

    return Renderable;

  })();

  Tile = (function(_super) {

    __extends(Tile, _super);

    function Tile(_arg) {
      this.x = _arg.x, this.y = _arg.y, this.color = _arg.color, this.entrance = _arg.entrance, this.exit = _arg.exit, this.cls = _arg.cls;
      this.id = this.getId();
    }

    Tile.prototype.clickHandle = function() {
      if (this.cls === 'grass') {
        this.getEl().removeClass(this.cls);
        this.cls = 'hole';
        return this.getEl().addClass(this.cls);
      }
    };

    Tile.prototype.getEl = function() {
      return $('#' + this.getId());
    };

    Tile.prototype.getId = function() {
      return this.x + '_' + this.y;
    };

    Tile.prototype.loadEl = function(el) {
      this.el = el;
      return this.onRender();
    };

    Tile.prototype.update = false;

    Tile.prototype.draw = false;

    Tile.prototype.onRender = function() {
      var me;
      if (this.el) {
        me = this;
        return this.el.addEventListener("click", function(p) {
          return me.clickHandle();
        });
      }
    };

    Tile.prototype.isEntrance = function() {
      return this.entrance;
    };

    Tile.prototype.isExit = function() {
      return this.exit;
    };

    return Tile;

  })(Renderable);

  Map = (function(_super) {

    __extends(Map, _super);

    function Map() {
      this.bindDragEvents = __bind(this.bindDragEvents, this);
      this.tiles = new Array(0);
    }

    Map.prototype.getTileDefinitions = function() {
      return this.raise("getTileDefinitions is abstract on Map");
    };

    Map.prototype.getId = function() {
      return this.raise("getId is abstract on Map");
    };

    Map.prototype.load = function(game) {
      var i, j, t, _i, _j, _len, _len1, _ref;
      _ref = this.getTileDefinitions();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        for (_j = 0, _len1 = i.length; _j < _len1; _j++) {
          j = i[_j];
          j.x = _j;
          j.y = _i;
          t = new Tile(j);
          if (t.isEntrance()) {
            this.entrance = t;
          } else if (t.isExit()) {
            this.exit = t;
          }
          t.load(game);
          this.tiles.push(t);
        }
      }
      return Map.__super__.load.call(this, game);
    };

    Map.prototype.render = function(el) {
      var fn,
        _this = this;
      fn = function(err, out) {
        var t, _i, _len, _ref, _results;
        el.innerHTML += out;
        _ref = _this.tiles;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(t.loadEl(document.getElementById(t.getId())));
        }
        return _results;
      };
      dust.render("map", {
        tiles: this.tiles
      }, fn);
      return this.bindDragEvents(this.game.elID);
    };

    Map.prototype.getEntrance = function() {
      return this.entrance;
    };

    Map.prototype.getExit = function() {
      return this.exit;
    };

    Map.prototype.addTower = function(options) {
      return this.game.tf.create(options);
    };

    Map.prototype.bindDragEvents = function(id) {
      var cells, dragEnterOrLeaveEvent, dragOverEvent, dragStartEvent, dropEvent, mapEl, menuTowers, preventDefaults,
        _this = this;
      preventDefaults = function(e) {
        e.stopPropagation();
        return e.preventDefault();
      };
      dragStartEvent = function(e) {
        return e.originalEvent.dataTransfer.setData('tower', e.target.id);
      };
      dragEnterOrLeaveEvent = function(e) {
        if (e.target.id !== _this.getExit().id && e.target.id !== _this.getEntrance().id) {
          return preventDefaults(e);
        }
      };
      dragOverEvent = function(e) {
        if (e.target.id !== _this.getExit().id && e.target.id !== _this.getEntrance().id) {
          return preventDefaults(e);
        }
      };
      dropEvent = function(e) {
        var targetTile, towerType;
        preventDefaults(e);
        towerType = e.originalEvent.dataTransfer.getData('tower');
        targetTile = e.target.id;
        return _this.addTower({
          type: towerType,
          target: targetTile
        });
      };
      mapEl = $('#' + id);
      cells = mapEl.find('td .grass');
      menuTowers = $('.tower-menu .tower');
      menuTowers.bind('dragstart', dragStartEvent);
      cells.bind('drop', dropEvent);
      cells.bind('dragenter dragleave', dragEnterOrLeaveEvent);
      return cells.bind('dragover', dragOverEvent);
    };

    return Map;

  })(Renderable);

  BasicMap = (function(_super) {

    __extends(BasicMap, _super);

    function BasicMap() {
      return BasicMap.__super__.constructor.apply(this, arguments);
    }

    BasicMap.prototype.getTileDefinitions = function() {
      return MAPS.Basic.tiles;
    };

    BasicMap.prototype.getId = function() {
      return 'map.basic';
    };

    return BasicMap;

  })(Map);

  Tower = (function(_super) {

    __extends(Tower, _super);

    function Tower(tileX, tileY) {
      this.tileX = tileX;
      this.tileY = tileY;
    }

    Tower.prototype.render = function() {
      var afterRender,
        _this = this;
      if (this.getEl().length === 0) {
        afterRender = function(err, out) {
          if (err) {
            return _this.raise(err);
          } else {
            _this.el[0].innerHTML += out;
            return _this.getEl().bind('click', function() {
              return console.log('tower clicked');
            });
          }
        };
        this.id = this.getId();
        return dust.render("tower", this, afterRender);
      }
    };

    Tower.prototype.getEl = function() {
      return $('#' + this.getId());
    };

    Tower.prototype.getId = function() {
      return 'tower_' + this.name;
    };

    Tower.prototype.hasTarget = function() {
      return !(this.target === null);
    };

    Tower.prototype.findTarget = function() {
      return console.log('Finding target to attack');
    };

    Tower.prototype.attackTarget = function() {
      if (this.target) {
        return console.log("attacking target " + this.target);
      } else {
        return console.log("no target to attack :(");
      }
    };

    return Tower;

  })(Renderable);

  GunTower = (function(_super) {

    __extends(GunTower, _super);

    function GunTower() {
      return GunTower.__super__.constructor.apply(this, arguments);
    }

    return GunTower;

  })(Tower);

  FreezeTower = (function(_super) {

    __extends(FreezeTower, _super);

    function FreezeTower() {
      return FreezeTower.__super__.constructor.apply(this, arguments);
    }

    return FreezeTower;

  })(Tower);

  RocketTower = (function(_super) {

    __extends(RocketTower, _super);

    function RocketTower() {
      return RocketTower.__super__.constructor.apply(this, arguments);
    }

    return RocketTower;

  })(Tower);

  TeleportTower = (function(_super) {

    __extends(TeleportTower, _super);

    function TeleportTower() {
      return TeleportTower.__super__.constructor.apply(this, arguments);
    }

    return TeleportTower;

  })(Tower);

  TowerFactory = (function() {

    function TowerFactory() {}

    TowerFactory.prototype.create = function(options) {
      if (options.type) {
        if (options.type === 'gunTower') {
          return new GunTower(options);
        }
        if (options.type === 'freezeTower') {
          return new FreezeTower(options);
        }
        if (options.type === 'rocketTower') {
          return new RocketTower(options);
        }
        if (options.type === 'teleportTower') {
          return new TeleportTower(options);
        }
      }
    };

    return TowerFactory;

  })();

  Creep = (function(_super) {

    __extends(Creep, _super);

    function Creep(_arg) {
      this.name = _arg.name, this.velocity = _arg.velocity;
      if (!this.velocity) {
        this.velocity = 0.5;
      }
      this.left = 0;
      if (!this.top) {
        this.top = 0;
      }
      this.el = $("#creepcave");
    }

    Creep.prototype.render = function() {
      var fn,
        _this = this;
      if ((this.getEl().length)) {
        return this.getEl().offset({
          top: this.top,
          left: this.left
        });
      } else {
        fn = function(err, out) {
          _this.el[0].innerHTML += out;
          return _this.getEl().live('click', function() {
            return _this.kill();
          });
        };
        this.id = this.getId();
        return dust.render("creep", this, fn);
      }
    };

    Creep.prototype.load = function(game, map) {
      var pos;
      if (map.getEntrance()) {
        pos = map.getEntrance().getEl().position();
        this.left = pos.left;
        this.leftstart = this.left;
        this.top += pos.top;
      }
      return Creep.__super__.load.call(this, game);
    };

    Creep.prototype.kill = function() {
      this.unload();
      this.getEl().die();
      this.getEl().remove();
      this.getEl().empty();
      return delete this;
    };

    Creep.prototype.getEl = function() {
      return $('#' + this.getId());
    };

    Creep.prototype.getId = function() {
      return 'creep_' + this.name;
    };

    Creep.prototype.update = function() {
      if ((this.left + this.velocity) > (this.leftstart + (24 * 20))) {
        return this.kill();
      } else {
        return this.left += this.velocity;
      }
    };

    Creep.prototype.draw = function() {
      return this.render();
    };

    return Creep;

  })(Renderable);

  Soldier = (function(_super) {

    __extends(Soldier, _super);

    function Soldier(_arg) {
      this.name = _arg.name;
      this.velocity = 0.8;
      this.cls = 'soldier';
      Soldier.__super__.constructor.call(this, this);
    }

    return Soldier;

  })(Creep);

  Tank = (function(_super) {

    __extends(Tank, _super);

    function Tank(_arg) {
      this.name = _arg.name;
      this.velocity = 0.5;
      this.cls = 'tank';
      Tank.__super__.constructor.call(this, this);
    }

    return Tank;

  })(Creep);

  Plane = (function(_super) {

    __extends(Plane, _super);

    function Plane(_arg) {
      this.name = _arg.name;
      this.velocity = 2;
      this.top = -8;
      this.cls = 'plane';
      Plane.__super__.constructor.call(this, this);
    }

    return Plane;

  })(Creep);

  CreepFactory = (function() {

    function CreepFactory() {}

    CreepFactory.prototype.breed = function(options) {
      if (options.type) {
        if (options.type === 'plane') {
          return new Plane(options);
        }
        if (options.type === 'tank') {
          return new Tank(options);
        }
        if (options.type === 'soldier') {
          return new Soldier(options);
        }
      }
      return new Soldier(options);
    };

    return CreepFactory;

  })();

  Game = (function() {

    function Game(elID) {
      this.elID = elID;
      this.spawn = __bind(this.spawn, this);

      this.less = __bind(this.less, this);

      this.more = __bind(this.more, this);

      this.stopSpawn = __bind(this.stopSpawn, this);

      this.doSpawn = __bind(this.doSpawn, this);

      this.fps = 60;
      this._spawntime = 500;
      this.renderables = {};
    }

    Game.prototype.initialize = function() {
      var hank;
      window.Game = this;
      this.map = new BasicMap();
      this.map.load(this);
      this.map.render(document.getElementById(this.elID));
      this.cf = new CreepFactory();
      this.tf = new TowerFactory();
      hank = this.cf.breed({
        name: 'Hank',
        type: 'soldier'
      });
      return hank.load(this, this.map);
    };

    Game.prototype.register = function(id, renderable) {
      return this.renderables[id] = renderable;
    };

    Game.prototype.unregister = function(id) {
      if (this.renderables[id]) {
        this.renderables[id] = void 0;
        return delete this.renderables[id];
      }
    };

    Game.prototype.spawn = function() {
      var c;
      c = this.cf.breed({
        name: this.genID()
      });
      c.load(this, this.map);
      return c;
    };

    Game.prototype.draw = function() {
      var k, v, _ref, _results;
      _ref = this.renderables;
      _results = [];
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        if (v.draw) {
          _results.push(v.draw());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype.update = function() {
      var k, v, _ref, _results;
      _ref = this.renderables;
      _results = [];
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        if (v.update) {
          _results.push(v.update());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype.genID = function() {
      var i, set, text, _i;
      text = "";
      set = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (i = _i = 0; _i <= 5; i = ++_i) {
        text += set.charAt(Math.floor(Math.random() * set.length));
      }
      return text;
    };

    Game.prototype.start = function() {
      var run;
      if (this._intervalId) {
        return;
      }
      run = (function(game) {
        var loops, nextGameTick, skipTicks;
        loops = 0;
        skipTicks = 1000 / game.fps;
        nextGameTick = (new Date).getTime();
        return function() {
          loops = 0;
          while ((new Date).getTime() > nextGameTick) {
            game.update();
            nextGameTick += skipTicks;
            loops++;
          }
          return game.draw();
        };
      })(this);
      console.log("Starting game");
      this._intervalId = setInterval(run, 0);
      return this.doSpawn();
    };

    Game.prototype.doSpawn = function() {
      this.stopSpawn();
      return this._spawnId = setInterval(this.spawn, this._spawntime);
    };

    Game.prototype.stopSpawn = function() {
      if (this._spawnId) {
        clearInterval(this._spawnId);
        return this._spawnId = null;
      }
    };

    Game.prototype.more = function() {
      if (this._spawntime > 0) {
        this._spawntime -= 100;
      }
      this.doSpawn();
      return this._spawntime;
    };

    Game.prototype.less = function() {
      if (this._spawntime < 1200) {
        this._spawntime += 100;
      }
      this.doSpawn();
      return this._spawntime;
    };

    Game.prototype.spawn = function() {
      var c, name, type;
      name = this.genID();
      type = 'soldier';
      if (name[0] > 'Z') {
        type = 'tank';
      } else if (name[1] > 'Z') {
        type = 'plane';
      }
      c = this.cf.breed({
        name: name,
        type: type
      });
      return c.load(this, this.map);
    };

    Game.prototype.pause = function() {};

    Game.prototype.save = function() {};

    Game.prototype.stop = function() {
      if (this._intervalId) {
        console.log("Stopping game");
        clearInterval(this._intervalId);
        this._intervalId = null;
      }
      return this.stopSpawn();
    };

    return Game;

  })();

  $(document).ready(function() {
    var game;
    game = new Game('battlefield');
    return game.initialize();
  });

}).call(this);
